// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonForum.Data;

namespace PokemonForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181123092701_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.Property<long>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ImageID");

                    b.Property<string>("Text");

                    b.Property<long?>("ThreadID");

                    b.Property<DateTime>("Time");

                    b.Property<string>("UserId");

                    b.HasKey("ArticleID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ThreadID");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleID = 1L, Text = "voluptatem-quia-nesciunt-voluptates-sequi-eveniet-et-et-non-amet-nobis-voluptatibus-dolorem-inventore-et-nobis-est-temporibus-voluptas-et-iusto-voluptates-aut-voluptatem-assumenda-delectus-dolorum-ut-deserunt-iure-expedita-corporis-reprehenderit-quia-tempora-aliquam-a-autem-dolorem-incidunt-qui-quisquam-sunt-voluptatem-aut-dolorem-reprehenderit-ea-ut-molestiae-tempore-qui-repellat-quia-porro-voluptate-neque-eos-eos-amet-ad-expedita-est-eos-provident-vel-deserunt-cumque-fugiat-laborum-est-saepe-delectus-sed-repudiandae-quo-suscipit-eligendi-numquam-rerum-in-numquam-alias-nam-porro-quaerat-nemo-numquam-ea-illum-explicabo-qui-expedita-rerum-a-non-architecto-et-temporibus-molestiae", Time = new DateTime(2018, 8, 30, 6, 25, 40, 982, DateTimeKind.Local) },
                        new { ArticleID = 2L, Text = "est-sunt-et-velit-omnis-et-laudantium-quaerat-alias-quasi-rem-et-adipisci-laborum-inventore-expedita-voluptatibus-nihil-enim-architecto-autem-exercitationem-perferendis-occaecati-et-labore-voluptas-culpa-maiores-rerum-ut-ut-temporibus-quo-rerum-rerum-ut-totam-earum-eum-nulla-tenetur-ea-maxime-dolorum-ut-praesentium-accusantium-eveniet-ad-sunt-aut-occaecati-ex-vero-qui-natus-dolores-exercitationem-sed-aut-rerum-ad-commodi-ipsum-sunt-dolores-atque-qui-esse-nemo-sint-atque-odio-tempora-quam-saepe-ut-eveniet-consequatur-dolor-ullam-soluta-impedit-omnis-saepe-vel-iusto-at-quos-vitae-non-ipsum-ea-est-sapiente-soluta-eaque-in-ab", Time = new DateTime(2018, 2, 16, 22, 22, 25, 64, DateTimeKind.Local) },
                        new { ArticleID = 3L, Text = "reiciendis-ullam-deleniti-delectus-in-cupiditate-beatae-consequuntur-iusto-et-exercitationem-ut-nostrum-possimus-aut-sed-error-vel-ad-consectetur-cumque-et-labore-suscipit-explicabo-ut-vitae-porro-ut-quod-at-est-pariatur-labore-et-repellat-velit-maxime-reiciendis-consequatur-corporis-nemo-esse-doloribus-temporibus-aut-debitis-facilis-sint-possimus-fugit-tempora-corporis-eos-et-ut-veritatis-ratione-accusamus-tempora-dignissimos-commodi-vero-optio-facilis-id-iure-illo-a-consequatur-alias-qui-quo-et-rerum-reprehenderit-numquam-dolore-unde-sed-totam-iusto-quibusdam-molestias-et-et-iure-doloribus-ipsum-qui-recusandae-illo-officiis-placeat-molestiae-earum-ducimus-quisquam-ut-sit", Time = new DateTime(2018, 4, 22, 20, 2, 42, 156, DateTimeKind.Local) },
                        new { ArticleID = 4L, Text = "dolorem-est-aut-possimus-nostrum-reprehenderit-qui-aut-cum-dolores-illum-animi-facere-possimus-aut-similique-aliquid-quasi-sit-numquam-in-aut-quas-officiis-hic-hic-dicta-voluptatibus-rerum-earum-dolores-ut-commodi-provident-facilis-maxime-nobis-facere-suscipit-ut-asperiores-perferendis-dolores-ipsam-sed-blanditiis-sed-doloribus-repudiandae-quis-aspernatur-est-sit-ut-amet-earum-amet-labore-consequatur-laboriosam-corporis-velit-accusantium-minus-rerum-repudiandae-labore-eius-fugit-ut-aut-animi-minus-dolor-modi-eum-eum-amet-facere-dolores-eum-aspernatur-quasi-sunt-voluptas-nulla-sunt-qui-nisi-nihil-iste-dignissimos-rerum-repellat-recusandae-culpa-doloribus-omnis-cum-sed", Time = new DateTime(2018, 9, 5, 6, 19, 27, 220, DateTimeKind.Local) },
                        new { ArticleID = 5L, Text = "ut-debitis-est-quos-et-sint-unde-maxime-aut-iste-alias-corrupti-ipsam-molestias-quia-nisi-qui-necessitatibus-quibusdam-nisi-voluptas-debitis-voluptate-impedit-odio-expedita-id-nulla-rerum-qui-dolorum-molestias-omnis-minima-non-eius-quam-vitae-nisi-molestiae-voluptatem-est-ut-ratione-iste-a-et-corrupti-qui-labore-sed-accusamus-debitis-vero-autem-voluptatem-totam-earum-illo-nulla-sit-nihil-odit-voluptate-recusandae-quos-itaque-aperiam-culpa-maiores-molestiae-quis-unde-accusamus-quia-adipisci-laboriosam-voluptatem-voluptatem-deleniti-accusantium-magnam-sed-ea-eos-placeat-harum-eligendi-et-et-facere-deleniti-doloremque-et-maxime-voluptatem-perspiciatis-magni-non-et", Time = new DateTime(2018, 11, 15, 13, 3, 14, 297, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Image", b =>
                {
                    b.Property<long>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<bool>("isAvatar");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new { ImageID = 1L, Name = "Wunsch", Path = "~/images/nothing.jpg", isAvatar = true },
                        new { ImageID = 2L, Name = "Kilback", Path = "~/images/nothing.jpg", isAvatar = true },
                        new { ImageID = 3L, Name = "Bartell", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 4L, Name = "Bayer", Path = "~/images/nothing.jpg", isAvatar = true },
                        new { ImageID = 5L, Name = "Mitchell", Path = "~/images/nothing.jpg", isAvatar = true }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Thread", b =>
                {
                    b.Property<long>("ThreadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("ThreadID");

                    b.ToTable("Threads");

                    b.HasData(
                        new { ThreadID = 1L, Title = "et-reprehenderit-assumenda-saepe-aut-in-aut-occaecati" },
                        new { ThreadID = 2L, Title = "excepturi-sunt-sit-dicta-in-sed-placeat-nulla" },
                        new { ThreadID = 3L, Title = "et-veritatis-ad-perspiciatis-et-sed-cumque-reiciendis" },
                        new { ThreadID = 4L, Title = "magni-molestias-sapiente-aut-molestias-quos-aut-eius" },
                        new { ThreadID = 5L, Title = "laudantium-dolores-laborum-ea-amet-voluptas-tempore-sequi" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("ApplicationsUserID");

                    b.Property<long?>("AvatarImageID");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.HasIndex("AvatarImageID");

                    b.ToTable("ApplicationsUser");

                    b.HasDiscriminator().HasValue("ApplicationsUser");

                    b.HasData(
                        new { Id = "Laurence.Upton16", AccessFailedCount = 0, Email = "Kaela.Daugherty78@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 1L, NickName = "Enrique" },
                        new { Id = "Khalil_Schuppe70", AccessFailedCount = 0, Email = "Ryleigh67@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 2L, NickName = "Katharina" },
                        new { Id = "Darius.Kilback", AccessFailedCount = 0, Email = "Macie8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 3L, NickName = "Brando" },
                        new { Id = "Jadyn.Keeling", AccessFailedCount = 0, Email = "Hershel72@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 4L, NickName = "Audra" },
                        new { Id = "Damaris.Lockman68", AccessFailedCount = 0, Email = "Rory20@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 5L, NickName = "Raoul" },
                        new { Id = "Orland51", AccessFailedCount = 0, Email = "Doyle_Tillman@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 6L, NickName = "Sandra" },
                        new { Id = "Jasen.Crist38", AccessFailedCount = 0, Email = "Leola.Steuber8@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 7L, NickName = "Laisha" },
                        new { Id = "Guy_Kirlin88", AccessFailedCount = 0, Email = "Donnie.Schowalter@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 8L, NickName = "Freddy" },
                        new { Id = "Shanie.Parker86", AccessFailedCount = 0, Email = "Cameron.Robel@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 9L, NickName = "Dana" },
                        new { Id = "Nathan.Huel29", AccessFailedCount = 0, Email = "Darren96@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 10L, NickName = "Damon" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("ForumPokemon.Models.Thread", "Thread")
                        .WithMany("Articles")
                        .HasForeignKey("ThreadID");

                    b.HasOne("ForumPokemon.Models.ApplicationsUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
