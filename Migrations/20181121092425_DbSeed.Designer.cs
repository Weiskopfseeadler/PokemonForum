// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonForum.Data;

namespace PokemonForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181121092425_DbSeed")]
    partial class DbSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.Property<long>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ImageID");

                    b.Property<string>("Text");

                    b.Property<long?>("ThreadID");

                    b.Property<DateTime>("Time");

                    b.HasKey("ArticleID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ThreadID");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleID = 1L, Text = "autem-optio-nostrum-dolorem-aspernatur-tempora-esse-sit-sint-et-unde-sunt-suscipit-consequatur-repudiandae-aspernatur-perspiciatis-dolore-doloribus-officiis-est-ducimus-et-voluptatibus-ipsa-debitis-eos-magni-in-quae-error-et-rerum-dolorem-eos-laborum-necessitatibus-unde-cum-quam-recusandae-quo-provident-odio-est-quasi-eaque-et-doloremque-sint-consectetur-optio-soluta-eum-nisi-non-harum-enim-dolor-eius-consequatur-quis-repellendus-accusamus-soluta-sed-qui-dolorem-accusamus-ullam-quia-asperiores-similique-similique-earum-perferendis-repudiandae-fuga-aliquam-ut-voluptas-molestiae-aspernatur-atque-vero-et-facere-sed-dolorem-non-voluptatibus-culpa-voluptas-blanditiis-illo-facilis-non-distinctio-omnis-est", Time = new DateTime(2017, 12, 17, 5, 15, 13, 974, DateTimeKind.Local) },
                        new { ArticleID = 2L, Text = "officiis-error-minus-impedit-adipisci-consequuntur-aut-rerum-sit-perferendis-consequatur-inventore-vel-vel-itaque-amet-ullam-perferendis-vel-consequatur-voluptatem-laboriosam-expedita-voluptatem-et-incidunt-aut-excepturi-exercitationem-dicta-magnam-et-facilis-ipsa-ut-eos-consequatur-est-distinctio-quod-rerum-ut-dolores-adipisci-aut-occaecati-hic-beatae-fugit-praesentium-et-est-hic-et-et-provident-et-velit-beatae-delectus-perferendis-animi-officia-et-omnis-qui-velit-est-voluptate-beatae-illum-non-aliquid-quasi-est-temporibus-nulla-laudantium-ut-odit-minima-aperiam-qui-quo-praesentium-id-sint-ea-dolores-iusto-tenetur-tenetur-eligendi-optio-est-ipsa-facilis-magnam-iusto-fugiat", Time = new DateTime(2018, 10, 12, 0, 44, 6, 544, DateTimeKind.Local) },
                        new { ArticleID = 3L, Text = "dolor-libero-eaque-rerum-aut-exercitationem-debitis-sint-sed-est-dignissimos-et-aut-nobis-voluptatibus-sed-facere-repellendus-nesciunt-modi-aut-rerum-aut-consequuntur-et-fugiat-et-ut-nobis-qui-deserunt-accusantium-sint-repellat-aspernatur-commodi-ea-velit-ex-nemo-ipsa-necessitatibus-perferendis-placeat-molestias-necessitatibus-quisquam-perferendis-maxime-voluptas-saepe-laudantium-minima-est-aut-ut-optio-repudiandae-omnis-ut-rerum-non-eum-aut-explicabo-quam-omnis-reiciendis-qui-et-voluptas-iste-molestiae-pariatur-sit-sed-fuga-modi-et-aut-aut-rerum-animi-nulla-magnam-magni-placeat-et-saepe-natus-libero-ducimus-quam-sunt-libero-excepturi-inventore-eaque-expedita-sunt", Time = new DateTime(2018, 7, 21, 15, 1, 52, 613, DateTimeKind.Local) },
                        new { ArticleID = 4L, Text = "maxime-molestiae-magni-repellat-suscipit-aperiam-molestiae-molestiae-voluptatibus-repudiandae-voluptatum-exercitationem-et-nesciunt-repellat-molestiae-maiores-est-delectus-libero-facilis-vitae-voluptatem-rerum-qui-dolores-laboriosam-dolor-libero-veritatis-officia-similique-non-rerum-consequatur-numquam-rem-pariatur-sint-explicabo-quia-deleniti-voluptates-est-adipisci-voluptatem-dolorum-recusandae-libero-qui-architecto-ipsam-est-nihil-est-distinctio-ea-sit-animi-sed-optio-dolore-possimus-et-voluptas-et-assumenda-neque-temporibus-repellendus-blanditiis-dolores-consequatur-officiis-ut-dolorem-quia-autem-facere-et-excepturi-voluptate-excepturi-vitae-doloribus-enim-debitis-aut-hic-impedit-consequatur-nostrum-dolore-quo-in-architecto-quisquam-doloribus-quia-quis", Time = new DateTime(2018, 7, 4, 15, 43, 1, 578, DateTimeKind.Local) },
                        new { ArticleID = 5L, Text = "praesentium-qui-aut-magni-itaque-molestias-illum-beatae-cupiditate-corrupti-doloremque-molestiae-ea-est-quis-id-tempore-non-illo-doloremque-nam-non-vitae-reiciendis-dolorem-necessitatibus-explicabo-voluptatum-ad-ducimus-sit-illo-totam-eos-illo-ut-et-tenetur-ab-voluptas-veritatis-accusantium-molestiae-modi-dolor-eos-necessitatibus-accusantium-aut-suscipit-quae-inventore-enim-quaerat-porro-dolore-veritatis-et-delectus-ab-velit-laboriosam-aut-architecto-corporis-reiciendis-sapiente-dolores-quidem-voluptatem-aut-quisquam-aut-quis-delectus-quidem-repellendus-vero-velit-corporis-repellat-et-commodi-itaque-in-quia-repellendus-quia-qui-aut-sed-quisquam-maiores-repellat-aliquid-quisquam-modi-aliquid-sint-et", Time = new DateTime(2017, 12, 28, 11, 7, 14, 195, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Image", b =>
                {
                    b.Property<long>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new { ImageID = 1L, Name = "O'Hara", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing" },
                        new { ImageID = 2L, Name = "Ritchie", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing" },
                        new { ImageID = 3L, Name = "Marks", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing" },
                        new { ImageID = 4L, Name = "Lebsack", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing" },
                        new { ImageID = 5L, Name = "Fadel", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Thread", b =>
                {
                    b.Property<long>("ThreadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("ThreadID");

                    b.ToTable("Threads");

                    b.HasData(
                        new { ThreadID = 1L, Title = "minima-repudiandae-sit-quidem-modi-dolorum-eveniet-maxime" },
                        new { ThreadID = 2L, Title = "quaerat-sed-dolore-ullam-quasi-esse-dolor-quas" },
                        new { ThreadID = 3L, Title = "aut-est-ut-sint-enim-sit-quis-est" },
                        new { ThreadID = 4L, Title = "est-ut-saepe-ducimus-soluta-ad-neque-quis" },
                        new { ThreadID = 5L, Title = "odio-earum-perferendis-minus-earum-libero-cumque-et" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("ApplicationsUserID");

                    b.Property<long?>("AvatarImageID");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.HasIndex("AvatarImageID");

                    b.ToTable("ApplicationsUser");

                    b.HasDiscriminator().HasValue("ApplicationsUser");

                    b.HasData(
                        new { Id = "Giuseppe22", AccessFailedCount = 0, Email = "Willis46@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 1L, NickName = "Era" },
                        new { Id = "Connor.Quitzon", AccessFailedCount = 0, Email = "Samir19@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 2L, NickName = "Ezra" },
                        new { Id = "Nicklaus_Hermann38", AccessFailedCount = 0, Email = "Tracy.Flatley@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 3L, NickName = "Muriel" },
                        new { Id = "Troy_Huels", AccessFailedCount = 0, Email = "Merl_Blanda91@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 4L, NickName = "Marian" },
                        new { Id = "Angela.Hegmann32", AccessFailedCount = 0, Email = "Nathanial_Herzog60@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 5L, NickName = "Uriah" },
                        new { Id = "Bulah.Bashirian", AccessFailedCount = 0, Email = "Elenora66@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 6L, NickName = "Rolando" },
                        new { Id = "Albina25", AccessFailedCount = 0, Email = "Maynard.Crist@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 7L, NickName = "Ines" },
                        new { Id = "Gladyce48", AccessFailedCount = 0, Email = "Gwendolyn.Watsica5@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 8L, NickName = "Regan" },
                        new { Id = "Noe.Durgan56", AccessFailedCount = 0, Email = "Saul_Kuhic@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 9L, NickName = "Beryl" },
                        new { Id = "Salvatore73", AccessFailedCount = 0, Email = "Joannie20@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 10L, NickName = "Maximilian" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("ForumPokemon.Models.Thread", "Thread")
                        .WithMany("Articles")
                        .HasForeignKey("ThreadID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
