// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonForum.Data;

namespace PokemonForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.Property<long>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ImageID");

                    b.Property<string>("Text");

                    b.Property<long?>("ThreadID");

                    b.Property<DateTime>("Time");

                    b.HasKey("ArticleID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ThreadID");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleID = 1L, Text = "aperiam-minima-id-esse-quia-nam-voluptatibus-corrupti-voluptatem-ipsa-officia-quis-alias-id-laborum-aliquam-possimus-mollitia-consequatur-magni-perferendis-molestias-modi-sint-assumenda-rerum-dignissimos-delectus-aliquam-ut-optio-error-et-ut-eius-quisquam-optio-quia-cupiditate-deserunt-ratione-suscipit-rem-modi-esse-reiciendis-culpa-qui-non-vel-aut-amet-molestiae-distinctio-sit-cupiditate-inventore-eius-est-dolor-eius-perferendis-incidunt-ab-ut-accusantium-totam-praesentium-occaecati-necessitatibus-natus-qui-quasi-esse-maiores-cum-eaque-alias-aut-temporibus-commodi-corporis-possimus-odio-dolorem-molestias-dolores-dolore-occaecati-eligendi-nam-voluptatum-cupiditate-ut-quis-magni-odit-quam-debitis-iure", Time = new DateTime(2018, 5, 19, 18, 30, 24, 482, DateTimeKind.Local) },
                        new { ArticleID = 2L, Text = "sed-fuga-voluptatem-aliquam-sint-fugit-perferendis-tempore-nisi-corrupti-inventore-sed-vero-vel-sint-quaerat-autem-rerum-quo-necessitatibus-modi-itaque-dolorem-tempora-dicta-inventore-est-ipsa-vero-sunt-dolorum-consequuntur-quo-minima-dolore-soluta-odio-amet-est-reprehenderit-quia-sunt-dolor-quia-id-ex-libero-provident-blanditiis-officiis-enim-provident-eaque-et-nostrum-dolor-quibusdam-sunt-ipsum-praesentium-reprehenderit-aut-illum-est-et-recusandae-ea-culpa-similique-labore-illum-est-ut-dignissimos-voluptas-est-omnis-dolorum-dolorum-qui-reprehenderit-consectetur-qui-voluptatibus-quaerat-dicta-dicta-numquam-maiores-et-rerum-ut-perferendis-consectetur-alias-voluptatem-possimus-voluptate-laboriosam-tempore", Time = new DateTime(2017, 12, 10, 4, 3, 16, 351, DateTimeKind.Local) },
                        new { ArticleID = 3L, Text = "dicta-delectus-numquam-illo-nihil-exercitationem-mollitia-minus-facilis-quam-quia-totam-odio-et-velit-iure-fugiat-excepturi-dolor-nulla-amet-deserunt-quas-ex-totam-deserunt-quae-odio-et-necessitatibus-aliquid-minima-hic-omnis-corporis-tempora-quis-non-omnis-temporibus-quos-atque-nisi-facilis-impedit-debitis-in-quia-et-voluptas-molestiae-saepe-natus-dolorem-voluptas-dolores-praesentium-eos-qui-fugit-magnam-sequi-fugit-facere-quasi-eveniet-occaecati-nam-voluptas-ut-sit-et-sapiente-doloribus-ex-nihil-dolore-vero-est-deserunt-perferendis-et-quidem-at-delectus-blanditiis-porro-quia-perferendis-aut-voluptas-molestias-nisi-iusto-ut-suscipit-quis-deserunt-in-consequatur", Time = new DateTime(2018, 7, 15, 5, 46, 6, 447, DateTimeKind.Local) },
                        new { ArticleID = 4L, Text = "voluptates-ea-fugiat-placeat-sit-recusandae-sunt-totam-inventore-dolore-id-numquam-asperiores-aspernatur-voluptas-sint-voluptatem-repellendus-et-dolor-in-est-a-sed-molestias-natus-cupiditate-ducimus-voluptatem-suscipit-expedita-veniam-quo-ut-odit-error-aut-aut-rerum-occaecati-ratione-et-tenetur-natus-neque-exercitationem-aliquid-suscipit-numquam-qui-odit-consequatur-a-harum-a-quaerat-in-et-labore-praesentium-voluptate-quia-ducimus-est-deserunt-voluptatem-autem-omnis-asperiores-omnis-impedit-nesciunt-quo-explicabo-doloremque-maxime-optio-in-ipsa-non-non-amet-ut-sed-tempora-nulla-quia-sed-ad-nulla-neque-dolor-eos-corrupti-aut-accusantium-quia-tempora-delectus-nulla", Time = new DateTime(2017, 12, 21, 15, 40, 30, 994, DateTimeKind.Local) },
                        new { ArticleID = 5L, Text = "officia-nisi-qui-aut-hic-ut-et-animi-non-error-alias-qui-doloremque-dolore-modi-rerum-dolore-et-maxime-asperiores-ipsum-atque-voluptatem-animi-non-exercitationem-ut-voluptatibus-consequatur-ut-totam-et-velit-nostrum-dolorum-nulla-repellendus-sunt-minima-debitis-praesentium-id-et-minima-neque-deserunt-fugiat-et-necessitatibus-eos-a-qui-modi-pariatur-placeat-odit-consectetur-pariatur-culpa-et-fuga-aut-mollitia-tempore-aspernatur-sunt-iure-quod-fuga-autem-aut-sequi-modi-accusamus-sed-similique-quam-officiis-iusto-itaque-laudantium-odit-explicabo-et-culpa-id-quia-ut-ut-sint-expedita-recusandae-excepturi-fuga-magnam-culpa-consequatur-reprehenderit-sit-officia", Time = new DateTime(2018, 9, 8, 17, 45, 35, 246, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Image", b =>
                {
                    b.Property<long>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<bool>("isAvatar");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new { ImageID = 1L, Name = "Zboncak", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 2L, Name = "Schulist", Path = "~/images/nothing.jpg", isAvatar = true },
                        new { ImageID = 3L, Name = "Leffler", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 4L, Name = "Bernhard", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 5L, Name = "Yundt", Path = "~/images/nothing.jpg", isAvatar = false }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Thread", b =>
                {
                    b.Property<long>("ThreadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("ThreadID");

                    b.ToTable("Threads");

                    b.HasData(
                        new { ThreadID = 1L, Title = "est-ut-et-voluptatem-quaerat-quo-ullam-corrupti" },
                        new { ThreadID = 2L, Title = "occaecati-sed-non-voluptas-temporibus-voluptas-consequuntur-atque" },
                        new { ThreadID = 3L, Title = "repellat-optio-similique-magnam-alias-et-officia-est" },
                        new { ThreadID = 4L, Title = "quaerat-consequuntur-dolorem-temporibus-voluptatem-consequatur-aliquid-culpa" },
                        new { ThreadID = 5L, Title = "aut-qui-quasi-eos-repellendus-iusto-autem-doloremque" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("ApplicationsUserID");

                    b.Property<long?>("AvatarImageID");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.HasIndex("AvatarImageID");

                    b.ToTable("ApplicationsUser");

                    b.HasDiscriminator().HasValue("ApplicationsUser");

                    b.HasData(
                        new { Id = "Aurelia.Morissette", AccessFailedCount = 0, Email = "Ferne68@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 1L, NickName = "Queenie" },
                        new { Id = "Emma.Jerde", AccessFailedCount = 0, Email = "Moshe.Borer@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 2L, NickName = "Josefa" },
                        new { Id = "Alison72", AccessFailedCount = 0, Email = "Laurie_Morissette2@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 3L, NickName = "Cassidy" },
                        new { Id = "Martine.Stanton48", AccessFailedCount = 0, Email = "Orie.Fay35@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 4L, NickName = "Kole" },
                        new { Id = "Richmond_Hauck", AccessFailedCount = 0, Email = "Pauline82@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 5L, NickName = "Hosea" },
                        new { Id = "Dangelo_Cummerata79", AccessFailedCount = 0, Email = "Tara_Rippin@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 6L, NickName = "Savannah" },
                        new { Id = "Magnolia_Murphy", AccessFailedCount = 0, Email = "Cordell12@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 7L, NickName = "Remington" },
                        new { Id = "Johnathan.Abbott38", AccessFailedCount = 0, Email = "Carolyn28@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 8L, NickName = "Lula" },
                        new { Id = "Missouri_Stracke", AccessFailedCount = 0, Email = "Owen.Wilkinson@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 9L, NickName = "Jaquan" },
                        new { Id = "Bianka.Paucek70", AccessFailedCount = 0, Email = "Leopold.Quigley@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 10L, NickName = "Verdie" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("ForumPokemon.Models.Thread", "Thread")
                        .WithMany("Articles")
                        .HasForeignKey("ThreadID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
