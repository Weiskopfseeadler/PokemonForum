// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonForum.Data;

namespace PokemonForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.Property<long>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ImageID");

                    b.Property<string>("Text");

                    b.Property<long?>("ThreadID");

                    b.Property<DateTime>("Time");

                    b.HasKey("ArticleID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ThreadID");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleID = 1L, Text = "rem-voluptatem-reprehenderit-iste-iusto-et-est-voluptates-voluptatem-eum-enim-est-nobis-aut-sit-cupiditate-perspiciatis-recusandae-et-non-eum-recusandae-cumque-culpa-consequatur-repudiandae-quia-nemo-reprehenderit-perferendis-sapiente-aut-nulla-illo-deserunt-est-maxime-excepturi-non-sit-sunt-ea-aut-dolor-in-est-eius-expedita-aut-repudiandae-doloribus-totam-aut-voluptas-esse-sed-natus-consequatur-amet-cupiditate-velit-quam-sint-magnam-accusamus-molestias-voluptas-et-excepturi-natus-omnis-aperiam-est-aspernatur-ea-nihil-magni-cupiditate-alias-rerum-optio-omnis-nihil-deleniti-voluptatem-dolores-eum-occaecati-rerum-illo-numquam-itaque-quia-est-et-sequi-necessitatibus-omnis-enim-quasi", Time = new DateTime(2018, 1, 2, 11, 18, 41, 198, DateTimeKind.Local) },
                        new { ArticleID = 2L, Text = "officia-qui-quia-dolores-tenetur-maxime-debitis-delectus-doloribus-ea-aperiam-aut-unde-dolorem-eos-asperiores-aperiam-tempora-quis-cum-quia-doloribus-blanditiis-nisi-voluptas-quo-eaque-dolor-quia-sed-culpa-numquam-recusandae-facere-odit-voluptate-aspernatur-ut-quasi-facere-tenetur-omnis-est-et-dolor-magni-est-eos-veritatis-nesciunt-at-quia-itaque-qui-error-animi-nobis-voluptatibus-nostrum-et-impedit-optio-possimus-blanditiis-dolorem-qui-officiis-autem-porro-qui-eveniet-nobis-nesciunt-dolorum-quisquam-assumenda-nisi-aut-neque-quo-itaque-quia-sed-ab-soluta-aliquam-minima-sed-consectetur-molestias-est-sed-inventore-dolorem-quae-aliquam-quibusdam-adipisci-eum-ea", Time = new DateTime(2018, 8, 19, 19, 45, 6, 341, DateTimeKind.Local) },
                        new { ArticleID = 3L, Text = "reiciendis-ratione-est-voluptatem-dolorem-dolorem-ipsam-tempore-quibusdam-aliquam-aut-illum-culpa-corporis-provident-culpa-impedit-est-sunt-ut-suscipit-id-quia-qui-omnis-et-sit-in-totam-aut-voluptatem-reiciendis-et-blanditiis-sapiente-doloremque-molestias-temporibus-sint-dicta-sapiente-et-qui-magnam-voluptas-ullam-deleniti-cupiditate-excepturi-cum-dicta-quam-quaerat-qui-sint-autem-itaque-aut-atque-ut-fugiat-id-quia-dolorem-odit-et-perferendis-quia-laboriosam-quas-quasi-sint-quaerat-atque-in-rem-non-tenetur-rerum-deleniti-voluptatem-consequatur-et-temporibus-rerum-qui-quisquam-voluptatibus-sed-officia-explicabo-fuga-nemo-aut-magnam-modi-expedita-sunt-ratione-itaque", Time = new DateTime(2018, 8, 9, 10, 39, 29, 938, DateTimeKind.Local) },
                        new { ArticleID = 4L, Text = "ex-sit-aut-est-dolorem-neque-est-et-ducimus-dolorem-voluptatibus-repellat-alias-reprehenderit-accusantium-tempore-quam-itaque-vel-amet-aperiam-officia-facere-voluptate-dignissimos-laborum-veniam-incidunt-ex-vel-quidem-consequatur-rerum-adipisci-autem-fuga-illo-sit-porro-similique-rerum-quod-sunt-nihil-aut-et-corporis-qui-tempora-omnis-labore-harum-voluptas-facere-magnam-voluptas-et-animi-neque-iste-debitis-perspiciatis-necessitatibus-harum-non-ipsum-ab-consequatur-mollitia-ea-dolorum-ut-eius-consequatur-labore-nostrum-et-sit-ullam-vel-nemo-cumque-consequatur-aut-in-alias-ipsa-adipisci-earum-doloremque-adipisci-blanditiis-sit-neque-est-in-at-blanditiis-saepe-itaque", Time = new DateTime(2018, 4, 24, 15, 27, 21, 372, DateTimeKind.Local) },
                        new { ArticleID = 5L, Text = "dolores-doloribus-qui-non-alias-velit-a-excepturi-sapiente-voluptatem-aspernatur-corporis-ut-dolore-quia-ut-dicta-inventore-cupiditate-magni-vero-accusamus-similique-non-dolorem-eius-inventore-sed-voluptas-odio-quae-iusto-ea-labore-vel-quo-sit-officiis-sunt-deserunt-dicta-soluta-voluptatibus-voluptas-explicabo-voluptatem-libero-sint-sint-eos-assumenda-in-quis-consequatur-quisquam-et-quam-laborum-voluptas-repellendus-ex-quo-tempore-occaecati-eius-nam-earum-aut-et-laudantium-ex-non-atque-recusandae-ipsa-dolor-rerum-et-sed-perferendis-unde-qui-id-voluptatibus-tempore-facilis-et-unde-sint-amet-nostrum-sunt-odit-repellendus-ut-magnam-aut-praesentium-perspiciatis-et", Time = new DateTime(2018, 9, 6, 15, 47, 12, 941, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Image", b =>
                {
                    b.Property<long>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<bool>("isAvatar");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new { ImageID = 1L, Name = "McCullough", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing", isAvatar = true },
                        new { ImageID = 2L, Name = "Ritchie", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing", isAvatar = false },
                        new { ImageID = 3L, Name = "Dietrich", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing", isAvatar = false },
                        new { ImageID = 4L, Name = "Schimmel", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing", isAvatar = false },
                        new { ImageID = 5L, Name = "Cummerata", Path = "C:\\Users\\vmadmin\\Desktop\\PokemonForum\\nothing", isAvatar = true }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Thread", b =>
                {
                    b.Property<long>("ThreadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("ThreadID");

                    b.ToTable("Threads");

                    b.HasData(
                        new { ThreadID = 1L, Title = "distinctio-laborum-culpa-vel-tempora-ratione-alias-impedit" },
                        new { ThreadID = 2L, Title = "rem-dolor-illum-delectus-cupiditate-eum-unde-commodi" },
                        new { ThreadID = 3L, Title = "non-odit-ullam-veritatis-eaque-dolores-et-facilis" },
                        new { ThreadID = 4L, Title = "hic-exercitationem-ipsam-quasi-aut-necessitatibus-esse-ut" },
                        new { ThreadID = 5L, Title = "possimus-numquam-iusto-sed-ea-ea-quaerat-dolore" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("ApplicationsUserID");

                    b.Property<long?>("AvatarImageID");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.HasIndex("AvatarImageID");

                    b.ToTable("ApplicationsUser");

                    b.HasDiscriminator().HasValue("ApplicationsUser");

                    b.HasData(
                        new { Id = "Keely50", AccessFailedCount = 0, Email = "Humberto_Runolfsson@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 1L, NickName = "Kaylee" },
                        new { Id = "Libbie.Kunde21", AccessFailedCount = 0, Email = "Rosie.Mayer@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 2L, NickName = "Daphnee" },
                        new { Id = "Laura78", AccessFailedCount = 0, Email = "Mavis42@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 3L, NickName = "Bennett" },
                        new { Id = "Destiney_Pfannerstill65", AccessFailedCount = 0, Email = "Betty_Renner@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 4L, NickName = "Kayli" },
                        new { Id = "Weldon.King35", AccessFailedCount = 0, Email = "Alana_Halvorson@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 5L, NickName = "Karson" },
                        new { Id = "Rita.Schultz87", AccessFailedCount = 0, Email = "Crystal.Robel31@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 6L, NickName = "Mikel" },
                        new { Id = "Floyd.Schowalter55", AccessFailedCount = 0, Email = "Mossie_Stamm61@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 7L, NickName = "Margarette" },
                        new { Id = "Pietro_Kuvalis15", AccessFailedCount = 0, Email = "Roy85@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 8L, NickName = "Margarita" },
                        new { Id = "Zachariah_Bahringer", AccessFailedCount = 0, Email = "Jonathon_Torphy13@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 9L, NickName = "Noel" },
                        new { Id = "Elwin.Glover", AccessFailedCount = 0, Email = "Beatrice86@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 10L, NickName = "Janick" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("ForumPokemon.Models.Thread", "Thread")
                        .WithMany("Articles")
                        .HasForeignKey("ThreadID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
