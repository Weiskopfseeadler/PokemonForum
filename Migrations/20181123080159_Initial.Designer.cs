// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonForum.Data;

namespace PokemonForum.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181123080159_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.Property<long>("ArticleID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ImageID");

                    b.Property<string>("Text");

                    b.Property<long?>("ThreadID");

                    b.Property<DateTime>("Time");

                    b.HasKey("ArticleID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ThreadID");

                    b.ToTable("Articles");

                    b.HasData(
                        new { ArticleID = 1L, Text = "tenetur-beatae-rem-voluptas-dolorem-distinctio-dolores-labore-ipsam-dolorem-voluptas-molestias-nostrum-asperiores-voluptatum-illum-et-minima-facilis-ut-dolore-officia-ut-voluptatum-nobis-et-aut-recusandae-velit-maxime-voluptatem-qui-illum-officiis-quaerat-enim-sit-consequuntur-non-expedita-omnis-inventore-aut-accusantium-enim-praesentium-nam-magni-ullam-alias-saepe-possimus-laborum-ullam-sed-commodi-vel-asperiores-beatae-et-vero-natus-eaque-sunt-cum-eaque-eligendi-quam-minus-dolorem-corrupti-corrupti-facere-doloribus-adipisci-consectetur-in-labore-sed-modi-et-cum-quidem-adipisci-pariatur-qui-sed-occaecati-facere-saepe-dolores-suscipit-ab-est-quibusdam-numquam-sit-odio-aliquid-incidunt", Time = new DateTime(2018, 2, 16, 1, 53, 31, 231, DateTimeKind.Local) },
                        new { ArticleID = 2L, Text = "et-qui-dolores-sint-voluptate-alias-dolorum-odit-non-temporibus-sunt-temporibus-vero-soluta-sit-molestiae-voluptas-quisquam-minima-sint-quia-nam-quo-libero-voluptatem-odio-ratione-adipisci-reiciendis-ipsum-eos-necessitatibus-aut-blanditiis-repellat-minima-quas-soluta-dignissimos-reprehenderit-et-velit-dolorem-odit-molestiae-perspiciatis-adipisci-molestiae-laborum-nostrum-quia-quisquam-quasi-ipsam-deserunt-in-natus-laudantium-commodi-ut-vero-molestiae-consequuntur-possimus-et-soluta-illum-in-nobis-et-nihil-neque-minima-necessitatibus-quam-omnis-voluptas-qui-maxime-est-dolore-eius-culpa-est-repellat-esse-qui-expedita-eos-quam-porro-eaque-voluptatem-rem-provident-quasi-quis-quasi-blanditiis-et", Time = new DateTime(2018, 3, 3, 17, 15, 0, 210, DateTimeKind.Local) },
                        new { ArticleID = 3L, Text = "autem-et-impedit-accusamus-perferendis-odio-dolor-saepe-fugiat-id-eum-porro-facere-est-rerum-nulla-odio-possimus-ut-eos-neque-sed-ut-amet-eum-voluptas-aut-ex-ut-rem-assumenda-ad-et-rerum-qui-reiciendis-officiis-qui-voluptatibus-aut-rerum-voluptas-doloremque-soluta-necessitatibus-quia-error-placeat-saepe-tempora-pariatur-enim-eius-eum-error-aliquam-reiciendis-occaecati-atque-ipsum-quidem-dolorem-perspiciatis-ea-ut-omnis-numquam-accusamus-enim-distinctio-aut-dolorum-omnis-quaerat-eius-qui-molestias-qui-exercitationem-veritatis-minima-illo-praesentium-quia-fuga-blanditiis-illo-sed-voluptatem-velit-repellat-aliquid-suscipit-vel-laboriosam-illum-eius-libero-impedit-suscipit", Time = new DateTime(2018, 10, 15, 19, 4, 26, 326, DateTimeKind.Local) },
                        new { ArticleID = 4L, Text = "eligendi-deleniti-ut-magnam-tempora-sed-sapiente-dolorem-dolorem-maxime-reprehenderit-modi-nihil-necessitatibus-qui-commodi-quam-minus-sint-dolores-aspernatur-omnis-architecto-distinctio-fuga-veniam-sapiente-et-in-dolor-quo-debitis-sapiente-a-officia-in-tempora-officiis-qui-sint-explicabo-tenetur-voluptatem-qui-est-consequuntur-repudiandae-et-possimus-qui-quibusdam-itaque-adipisci-quo-consequatur-qui-ea-sunt-et-rerum-in-ipsa-voluptas-doloribus-voluptates-sint-voluptatem-totam-corporis-consequatur-eos-unde-suscipit-mollitia-ea-ratione-in-dolorum-illo-dolores-quis-ipsa-dolorem-hic-vel-ut-soluta-quia-hic-dignissimos-ipsum-expedita-et-qui-nisi-illo-amet-nesciunt-perspiciatis-sunt", Time = new DateTime(2018, 1, 12, 7, 12, 36, 860, DateTimeKind.Local) },
                        new { ArticleID = 5L, Text = "ducimus-et-placeat-ipsam-magnam-animi-animi-iusto-eos-quod-repellendus-sint-magni-in-provident-officiis-vel-laborum-consequatur-quo-qui-sint-eos-quo-deleniti-corporis-aut-magnam-ut-a-labore-beatae-delectus-harum-et-molestiae-esse-harum-magni-ullam-vitae-nobis-sunt-nihil-iure-qui-fugit-debitis-vel-dolor-quis-unde-sed-aliquam-quisquam-non-possimus-voluptates-quo-rerum-quisquam-ut-dicta-ut-et-nihil-omnis-dolores-et-odit-praesentium-sit-atque-impedit-possimus-blanditiis-molestiae-sequi-qui-laboriosam-consectetur-alias-odio-ipsum-officia-eligendi-perspiciatis-impedit-repudiandae-asperiores-libero-molestias-quibusdam-sit-in-minus-mollitia-amet-sed-soluta", Time = new DateTime(2018, 4, 21, 21, 35, 1, 431, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Image", b =>
                {
                    b.Property<long>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<bool>("isAvatar");

                    b.HasKey("ImageID");

                    b.ToTable("Images");

                    b.HasData(
                        new { ImageID = 1L, Name = "McKenzie", Path = "~/images/nothing.jpg", isAvatar = true },
                        new { ImageID = 2L, Name = "Gaylord", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 3L, Name = "Ankunding", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 4L, Name = "Mertz", Path = "~/images/nothing.jpg", isAvatar = false },
                        new { ImageID = 5L, Name = "DuBuque", Path = "~/images/nothing.jpg", isAvatar = false }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Thread", b =>
                {
                    b.Property<long>("ThreadID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("ThreadID");

                    b.ToTable("Threads");

                    b.HasData(
                        new { ThreadID = 1L, Title = "et-molestias-quidem-sapiente-et-ut-sint-sed" },
                        new { ThreadID = 2L, Title = "excepturi-et-eos-molestiae-impedit-sit-aliquam-amet" },
                        new { ThreadID = 3L, Title = "maiores-dicta-ut-numquam-iure-et-saepe-ex" },
                        new { ThreadID = 4L, Title = "ipsam-enim-exercitationem-voluptas-at-eaque-ut-a" },
                        new { ThreadID = 5L, Title = "quia-omnis-illum-excepturi-aperiam-aliquam-enim-commodi" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("ApplicationsUserID");

                    b.Property<long?>("AvatarImageID");

                    b.Property<string>("NickName");

                    b.Property<string>("Password");

                    b.HasIndex("AvatarImageID");

                    b.ToTable("ApplicationsUser");

                    b.HasDiscriminator().HasValue("ApplicationsUser");

                    b.HasData(
                        new { Id = "Levi_Farrell19", AccessFailedCount = 0, Email = "Jessy_Gislason@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 1L, NickName = "Annabell" },
                        new { Id = "Jada_Kuphal90", AccessFailedCount = 0, Email = "Ramona_Cronin65@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 2L, NickName = "Teresa" },
                        new { Id = "Howell.Wiegand", AccessFailedCount = 0, Email = "Ryleigh_Flatley74@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 3L, NickName = "Brendon" },
                        new { Id = "Kieran.Sanford39", AccessFailedCount = 0, Email = "Cornelius.OConner@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 4L, NickName = "Lindsey" },
                        new { Id = "Amara_Gutkowski", AccessFailedCount = 0, Email = "Savanah_Huel@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 5L, NickName = "Reva" },
                        new { Id = "Alexander77", AccessFailedCount = 0, Email = "Matilde.Kreiger@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 6L, NickName = "Rachelle" },
                        new { Id = "Luna.Pfeffer93", AccessFailedCount = 0, Email = "Tessie_Dibbert@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 7L, NickName = "Cesar" },
                        new { Id = "Tremaine_Cruickshank", AccessFailedCount = 0, Email = "Dominique37@hotmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 8L, NickName = "Arnulfo" },
                        new { Id = "Kelsie54", AccessFailedCount = 0, Email = "Marielle.McKenzie73@yahoo.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 9L, NickName = "Cooper" },
                        new { Id = "Delbert.Feil", AccessFailedCount = 0, Email = "Theodore95@gmail.com", EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, ApplicationsUserID = 10L, NickName = "Kathryne" }
                    );
                });

            modelBuilder.Entity("ForumPokemon.Models.Article", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("ForumPokemon.Models.Thread", "Thread")
                        .WithMany("Articles")
                        .HasForeignKey("ThreadID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ForumPokemon.Models.ApplicationsUser", b =>
                {
                    b.HasOne("ForumPokemon.Models.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
